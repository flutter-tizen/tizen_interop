// Copyright 2021 Samsung Electronics Co., Ltd. All rights reserved.
// Use of this source code is governed by a BSD-style license that can be
// found in the LICENSE file.

import 'dart:convert';
import 'dart:io';

import 'package:file/file.dart';
import 'package:file/local.dart';

import 'config.dart';

class CodeGenerator {
  final Config _config;

  CodeGenerator(Config config) : _config = config;

  void generate() {
    var fs = const LocalFileSystem();
    final libraryPath = fs.directory(_config.libraryPath);
    if (!libraryPath.existsSync()) {
      throw FileSystemException('$libraryPath is not found.');
    }

    var contents = '''
${_config.preamble}
// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:symgen`.

final Map<String, List<String>> ${_config.name} = {
''';
    for (var library in _config.targetLibraries) {
      contents += '  \'$library\': [\n';
      for (var symbol in _getSymbols(libraryPath.childFile(library))) {
        if (_config.allowlist.isEmpty || _config.allowlist.contains(symbol)) {
          contents += '    \'$symbol\',\n';
        }
      }
      contents += '  ],\n';
    }
    contents += '};\n';

    final outputFile = fs.file(_config.output);
    outputFile.parent.createSync(recursive: true);
    outputFile.writeAsStringSync(contents);
  }

  Iterable<String> _getSymbols(File libraryFile) sync* {
    var result = Process.runSync('nm', ['-D', libraryFile.absolute.path]);
    final exp = RegExp(r'[0-9a-f]+ T ([a-zA-Z].+)');
    for (var line in LineSplitter.split(result.stdout)) {
      final match = exp.firstMatch(line);
      if (match != null) {
        yield match.group(1)!;
      }
    }
  }
}
